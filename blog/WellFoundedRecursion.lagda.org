#+Title: An exploration of well-founded recursion
#+Author: Mark Armstrong
#+Date: April 1st, 2020
#+Description: Exploring definitions using well-founded recursion in Agda.
#+Startup: noindent
#+Setupfile: ./../theme-readtheorg.setup
#+Export_file_name: WellFoundedRecursion
#+Property: header-args:agda2 :tangle src/EqualityOfFunctions.agda

* Introduction
  :PROPERTIES:
  :CUSTOM_ID: Introduction
  :END:

Using well-founded relations to assist the termination checker
of Agda is something I have always meant to investigate,
but never quite gotten around to.
This post attempts to rectify that.

First, I must give credit to the example code posted
by [[https://github.com/sergei-romanenko/agda-samples/blob/master/08-WellFounded.agda][Sergei Romanenko]],
which explores the technique using a ~log₂~ algorithm.

* Agda header
  :PROPERTIES:
  :CUSTOM_ID: Agda-header
  :END:

We use several facts about natural numbers, specfically
regarding ~<~ and ~≤~ (from which ~<~ is derived) below.
#+begin_src agda2
module WellFoundedRecursion where

open import Data.Nat
  using ( ℕ ; zero ; suc
        ; _+_ ; _∸_ ; _⊔_
        ; _≤_ ; _<_ ; z≤n ; s≤s
        ; _≤′_ ; _<′_ ; ≤′-refl ; ≤′-step)
open import Data.Nat.Properties
  using ( <-cmp ; ≤-step ; ≤-refl ; <-transˡ ; ≤⇒≤′
        ; m∸n≤m)

open import Relation.Binary.Definitions using (tri< ; tri≈ ; tri>)
open import Relation.Binary.PropositionalEquality using (_≡_ ; refl)

open import Function using (case_of_)
#+end_src

* Problem 1 – The Euclidean algorithm
  :PROPERTIES:
  :CUSTOM_ID: Problem-1-–-The-Euclidean-algorithm
  :END:

** Preamble
   :PROPERTIES:
   :CUSTOM_ID: Preamble
   :END:

Euclid's GCD is a well known and elegantly simple algorithm.
It hinges upon the fact that
given natural numbers ~m~ and ~n~ with ~m < n~, ~GCD(m,n) = GCD(m,n-m)~.
Note also that if ~m = n~, then ~GCD(m,n) = m = n~,
and if ~n = 0~, then ~GCD(m,n) = m~.

Making use of the three-way comparison function ~<-cmp~,
we can easily transcribe this algorithm into Agda.
#+begin_src agda2
module WithoutWFR where
  
  {-# TERMINATING #-}
  EuclidGCD : ℕ → ℕ → ℕ
  EuclidGCD zero      m         = m
  EuclidGCD n@(suc _) zero      = n
  EuclidGCD n@(suc _) m@(suc _) =
    case <-cmp n m of
      λ { (tri< _ _ _) → EuclidGCD n (m ∸ n)
        ; (tri≈ _ _ _) → m
        ; (tri> _ _ _) → EuclidGCD (n ∸ m) m
        }
#+end_src
But Agda will not believe this is terminating, because it fails to see
in the recursive case that ~m ∸ n~/~n ∸ m~ are
structurally smaller than ~m~ or ~n~.

Note that the use of the ~TERMINATING~ pragma does allow us to
use ~EuclidGCD~; unlike the ~NONTERMINATING~ pragma, which
would prevent Agda from normalising uses of ~EuclidGCD~.
#+begin_src agda2
  _ : EuclidGCD 12 20 ≡ 4
  _ = refl
#+end_src
But it is ultimately against the spirit of verified programming in Agda
to use this “just believe me” approach.


This is understandable; we must apply the proofs
of ~m < n~ or ~n < m~ in order to establish those facts.
If we try to state that using ~_<_~, we get stuck in the base cases
during the proof.
#+begin_example agda2
m∸n<m : {m n : ℕ} → m ∸ n < m
m∸n<m {m} {zero} = ??? -- Stuck; m ≮ n
m∸n<m {zero} {suc n} = ??? -- Stuck ; zero ≮ zero
m∸n<m {suc m} {suc n} =
  <-transˡ (m∸n<m {m} {n}) -- suc m ∸ suc n = m ∸ n < m, by I.H.
          (≤-step ≤-refl) -- and m ≤ suc m.
#+end_example

To actually prove this,
we must know that both ~m~ and ~n~ are non-zero
—then we may use the fact
that ~m ∸ n~ is /less than or equal to/ to ~m~,
the proof of which is in the standard library and is very close
to our attempted proof above for ~_<_~.
#+begin_src agda2
Sm∸Sn<Sm : (m n : ℕ) → suc m ∸ suc n < suc m
Sm∸Sn<Sm m n = s≤s (m∸n≤m m n)
#+end_src

With this proof in hand, we are equipped to use a well-founded relation
to rework our ~EuclidGCD~ function so that it passes the termination checker.
We start by defining the concepts ourselves,
then we will utilise the (level-agnostic) versions from the standard library.

** Solution version 1 – Defining our own notion of well-foundedness
   :PROPERTIES:
   :CUSTOM_ID: Solution-version-1-–-Defining-our-own-notion-of-well-foundedness
   :END:

#+begin_src agda2
module definingWFR where
#+end_src

We begin with the concept of /accessibility/. An element ~x~ of ~A~ is
accessible by relation ~_<_~ iff every ~y~ such that ~y < x~ is accessible.
#+begin_src agda2 :exports none
  module AccessibilityFromScratch where
#+end_src
#+begin_src agda2
    data Acc {A : Set} (_<_ : A → A → Set) (x : A) : Set where
      acc : (rs : (y : A) → y < x → Acc _<_ y) → Acc _<_ x
#+end_src
I'm honestly not quite certain of the reasoning behind
the name ~rs~; I interpret it as “Recurse on Smaller”.
This is motivated by the standard library description of
the type of ~rs~:
#+begin_quote
When using well-founded recursion you can recurse arbitrarily, as
long as the arguments become smaller, and “smaller” is
well-founded.
#+end_quote 

The standard library “extracts” that type. It is the type of
“well-founded recursion”; we do the same here.
#+begin_src agda2
  WfRec : {A : Set} → (A → A → Set) → (A → Set) → A → Set
  WfRec {A} _<_ P x = {y : A} → y < x → P y
#+end_src
Then the above definition is shortened to
#+begin_src agda2
  data Acc {A : Set} (_<_ : A → A → Set) (x : A) : Set where
    acc : (rs : WfRec _<_ (Acc _<_) x) → Acc _<_ x
#+end_src

#+begin_comment
As a bit of an aside, the standard library uses the notion
of a “recursive structure”; it has the shape
#+begin_example agda2
(A : Set) → (A → Set) → A → Set
#+end_example
so that the type of ~WfRec~ is written
#+begin_example agda2
WfRec : {A : Set} → (A → A → Set) → RecStruct A
#+end_example
I won't chase these generalisations any further here;
they are interesting, but can make it hard to follow the definitions
—hence, my writing this section to unravel it all.
#+end_comment

A relation is well-founded if all elements
of the underlying set are accessible;
that is, we will need to prove that for every ~x : A~,
every ~y < x~ is accessible to
be able to call ~_<_~ well founded.
#+begin_src agda2
  Well-founded : {A : Set} → (A → A → Set) → Set
  Well-founded {A} _<_ = (x : A) → Acc _<_ x
#+end_src

Let us prove that less than on the naturals is well-founded.
We use an alternate version of less from the standard library
defined using reflexivity and “step” as constructors,
which the standard library describes as
#+begin_quote
more suitable for well-founded induction (see Induction.Nat).
#+end_quote
I did not manage to complete the proof using ~_<_~ before turning
to this ~_<′_~.
#+begin_src agda2
  <′-acc : {x y : ℕ} → y <′ x → Acc _<′_ y
  <′-acc .{suc y} {y} ≤′-refl = acc <′-acc
  <′-acc (≤′-step {_} y<′x) = <′-acc y<′x

  <′-well-founded : Well-founded _<′_
  <′-well-founded n = acc <′-acc
#+end_src
Since the right side of the base case of ~<′-acc~ is
exactly ~<′-well-founded~, I've seen these presented as
mutual definitions; I find it more illuminating to
detangle them.

Now, to define the Euclidean algorithm function,
we must decide upon a value upon which to base our well-founded recursion
with respect to ~_<_~. That is, we must decide upon a value
which is strictly decreasing at each call.
However, we are only decreasing one of the two arguments at each call,
and it is not necessarily the same argument each time.
So neither ~m~ or ~n~ is an adequate choice.
Instead, we may consider the /maximum/ of the two, ~m ⊔ n~,
which does always decrease, since we monus a non-zero value
from the greater of the two arguments at each call.
This does require some lemmas regarding ~_⊔_~.
#+begin_src agda2
  open import Data.Nat.Properties
    using (m<n⇒m<n⊔o ; m<n⇒m<o⊔n ; ⊔-pres-<m)

  EuclidGCD′ : (m n : ℕ) → Acc _<′_ (m ⊔ n) → ℕ
  EuclidGCD′ zero m _ = m
  EuclidGCD′ n@(suc _) zero _ = n
  EuclidGCD′ m@(suc m₀) n@(suc n₀) (acc rs) =
    case <-cmp m n of
      λ { (tri< m<n _ _) →
          EuclidGCD′ m (n ∸ m)
                     (rs {suc m₀ ⊔ (n₀ ∸ m₀)}
                         (≤⇒≤′ (m<n⇒m<o⊔n m (⊔-pres-<m m<n (Sm∸Sn<Sm n₀ m₀)))))
        ; (tri≈ _ _ _)   → m
        ; (tri> _ _ n<m) →
          EuclidGCD′ (m ∸ n) n
                     (rs {m₀ ∸ n₀ ⊔ suc n₀}
                         (≤⇒≤′ (m<n⇒m<n⊔o n (⊔-pres-<m (Sm∸Sn<Sm m₀ n₀) n<m))))
        }
#+end_src
In the recursive cases, ~rs~ has the type
#+begin_example agda2
{y : ℕ} → suc y ≤′ suc (m₀ ⊔ n₀) → Acc (λ m₁ n₁ → suc m₁ ≤′ n₁) y
#+end_example
We've written the implicit argument in in each use
(although Agda doesn't need it to be given)
for clarity.

Now, we can define a “clean” version of the Euclidean algorithm function
by utilising our proof that ~_<′_~ is well-founded.
#+begin_src agda2
  EuclidGCD : (m n : ℕ) → ℕ
  EuclidGCD m n = EuclidGCD′ m n (<′-well-founded (m ⊔ n))
#+end_src

** Solution version 2 – Using the standard library's definitions
   :PROPERTIES:
   :CUSTOM_ID: Solution-version-2-–-Using-the-standard-library's-definitions
   :END:

:TODO:
