#+Title: An exploration of well-founded recursion
#+Author: [[https://armkeh.github.io][Mark Armstrong]] [[file:./../images/markarmstrong.jpg]]
#+Date: April 1st, 2020
#+Description: Exploring definitions using well-founded recursion in Agda.
#+Startup: noindent
#+Setupfile: ./../theme-readtheorg.setup
#+Export_file_name: WellFoundedRecursion
#+Property: header-args:agda2 :tangle src/EqualityOfFunctions.agda

* Introduction
  :PROPERTIES:
  :CUSTOM_ID: Introduction
  :END:

Using well-founded relations to assist the termination checker
of Agda is something I have always meant to investigate,
but never quite gotten around to.
This post attempts to rectify that.

First, I must give credit to the example code posted
by [[https://github.com/sergei-romanenko/agda-samples/blob/master/08-WellFounded.agda][Sergei Romanenko]],
which explores the technique using a ~log₂~ algorithm;
my own developments were written by using that as an example.

* Agda header
  :PROPERTIES:
  :CUSTOM_ID: Agda-header
  :END:

We use several facts about natural numbers, specfically
regarding ~<~ and ~≤~ (from which ~<~ is derived) below.
#+begin_src agda2
module WellFoundedRecursion where

open import Data.Unit using (⊤)
open import Data.Nat
  using ( ℕ ; zero ; suc
        ; _+_ ; _∸_ ; _⊔_
        ; _≤_ ; _<_ ; z≤n ; s≤s
        ; _≤′_ ; _<′_ ; ≤′-refl ; ≤′-step)
open import Data.Nat.Properties
  using ( <-cmp ; ≤-step ; ≤-refl ; <-transˡ ; ≤⇒≤′
        ; m∸n≤m
        ; m<n⇒m<n⊔o ; m<n⇒m<o⊔n ; ⊔-pres-<m)
open import Data.Product using (_×_ ; _,_)
open import Data.Sum using (_⊎_ ; inj₁ ; inj₂)

open import Relation.Binary.Definitions using (tri< ; tri≈ ; tri>)
open import Relation.Binary.PropositionalEquality using (_≡_ ; refl)

open import Function using (case_of_)
#+end_src

* Problem 1 – The Euclidean algorithm
  :PROPERTIES:
  :CUSTOM_ID: Problem-1-–-The-Euclidean-algorithm
  :END:

** Preamble
   :PROPERTIES:
   :CUSTOM_ID: Preamble
   :END:

Euclid's GCD is a well known and elegantly simple algorithm.
It hinges upon the fact that
given natural numbers ~m~ and ~n~ with ~m < n~, ~GCD(m,n) = GCD(m,n-m)~.
Note also that if ~m = n~, then ~GCD(m,n) = m = n~,
and if ~n = 0~, then ~GCD(m,n) = m~.

Making use of the three-way comparison function ~<-cmp~,
we can easily transcribe this algorithm into Agda.
#+begin_src agda2
module WithoutWFR where
  
  {-# TERMINATING #-}
  EuclidGCD : ℕ → ℕ → ℕ
  EuclidGCD zero      m         = m
  EuclidGCD n@(suc _) zero      = n
  EuclidGCD n@(suc _) m@(suc _) =
    case <-cmp n m of
      λ { (tri< _ _ _) → EuclidGCD n (m ∸ n)
        ; (tri≈ _ _ _) → m
        ; (tri> _ _ _) → EuclidGCD (n ∸ m) m
        }
#+end_src
But Agda will not believe this is terminating, because it fails to see
in the recursive case that ~m ∸ n~/~n ∸ m~ are
structurally smaller than ~m~ or ~n~.

Note that the use of the ~TERMINATING~ pragma does allow us to
use ~EuclidGCD~; unlike the ~NONTERMINATING~ pragma, which
would prevent Agda from normalising uses of ~EuclidGCD~.
#+begin_src agda2
  _ : EuclidGCD 12 20 ≡ 4
  _ = refl
#+end_src
But it is ultimately against the spirit of verified programming in Agda
to use this “just believe me” approach.


This is understandable; we must apply the proofs
of ~m < n~ or ~n < m~ in order to establish those facts.
If we try to state that using ~_<_~, we get stuck in the base cases
during the proof.
#+begin_example agda2
m∸n<m : {m n : ℕ} → m ∸ n < m
m∸n<m {m} {zero} = ??? -- Stuck; m ≮ n
m∸n<m {zero} {suc n} = ??? -- Stuck ; zero ≮ zero
m∸n<m {suc m} {suc n} =
  <-transˡ (m∸n<m {m} {n}) -- suc m ∸ suc n = m ∸ n < m, by I.H.
          (≤-step ≤-refl) -- and m ≤ suc m.
#+end_example

To actually prove this,
we must know that both ~m~ and ~n~ are non-zero
—then we may use the fact
that ~m ∸ n~ is /less than or equal to/ to ~m~,
the proof of which is in the standard library and is very close
to our attempted proof above for ~_<_~.
#+begin_src agda2
Sm∸Sn<Sm : (m n : ℕ) → suc m ∸ suc n < suc m
Sm∸Sn<Sm m n = s≤s (m∸n≤m m n)
#+end_src

With this proof in hand, we are equipped to use a well-founded relation
to rework our ~EuclidGCD~ function so that it passes the termination checker.
We start by defining the concepts ourselves,
then we will utilise the (level-agnostic) versions from the standard library.

** Solution version 1 – Defining our own notion of well-foundedness
   :PROPERTIES:
   :CUSTOM_ID: Solution-version-1-–-Defining-our-own-notion-of-well-foundedness
   :END:

#+begin_src agda2
module definingWFR where
#+end_src

We begin with the concept of /accessibility/. An element ~x~ of ~A~ is
accessible by relation ~_<_~ iff every ~y~ such that ~y < x~ is accessible.
#+begin_src agda2 :exports none
  module AccessibilityFromScratch where
#+end_src
#+begin_src agda2
    data Acc {A : Set} (_<_ : A → A → Set) (x : A) : Set where
      acc : (rs : (y : A) → y < x → Acc _<_ y) → Acc _<_ x
#+end_src
I'm honestly not quite certain of the reasoning behind
the name ~rs~; I interpret it as “Recurse on Smaller”.
This is motivated by the standard library description of
the type of ~rs~:
#+begin_quote
When using well-founded recursion you can recurse arbitrarily, as
long as the arguments become smaller, and “smaller” is
well-founded.
#+end_quote 

The standard library “extracts” that type. It is the type of
“well-founded recursion”; we do the same here.
#+begin_src agda2
  WfRec : {A : Set} → (A → A → Set) → (A → Set) → A → Set
  WfRec {A} _<_ P x = {y : A} → y < x → P y
#+end_src
Then the above definition is shortened to
#+begin_src agda2
  data Acc {A : Set} (_<_ : A → A → Set) (x : A) : Set where
    acc : (rs : WfRec _<_ (Acc _<_) x) → Acc _<_ x
#+end_src

#+begin_comment
As a bit of an aside, the standard library uses the notion
of a “recursive structure”; it has the shape
#+begin_example agda2
(A : Set) → (A → Set) → A → Set
#+end_example
so that the type of ~WfRec~ is written
#+begin_example agda2
WfRec : {A : Set} → (A → A → Set) → RecStruct A
#+end_example
I won't chase these generalisations any further here;
they are interesting, but can make it hard to follow the definitions
—hence, my writing this section to unravel it all.
#+end_comment

A relation is well-founded if all elements
of the underlying set are accessible;
that is, we will need to prove that for every ~x : A~,
every ~y < x~ is accessible to
be able to call ~_<_~ well founded.
#+begin_src agda2
  Well-founded : {A : Set} → (A → A → Set) → Set
  Well-founded {A} _<_ = (x : A) → Acc _<_ x
#+end_src

Let us prove that less than on the naturals is well-founded.
We use an alternate version of less from the standard library
defined using reflexivity and “step” as constructors,
which the standard library describes as
#+begin_quote
more suitable for well-founded induction (see Induction.Nat).
#+end_quote
I did not manage to complete the proof using ~_<_~ before turning
to this ~_<′_~.
#+begin_src agda2
  <′-acc : {x y : ℕ} → y <′ x → Acc _<′_ y
  <′-acc .{suc y} {y} ≤′-refl = acc <′-acc
  <′-acc (≤′-step {_} y<′x) = <′-acc y<′x

  <′-well-founded : Well-founded _<′_
  <′-well-founded n = acc <′-acc
#+end_src
Since the right side of the base case of ~<′-acc~ is
exactly ~<′-well-founded~, I've seen these presented as
mutual definitions; I find it more illuminating to
detangle them.

Now, to define the Euclidean algorithm function,
we must decide upon a value upon which to base our well-founded recursion
with respect to ~_<_~. That is, we must decide upon a value
which is strictly decreasing at each call.
However, we are only decreasing one of the two arguments at each call,
and it is not necessarily the same argument each time.
So neither ~m~ or ~n~ is an adequate choice.
Instead, we may consider the /maximum/ of the two, ~m ⊔ n~,
which does always decrease, since we monus a non-zero value
from the greater of the two arguments at each call.
This does require some lemmas regarding ~_⊔_~.
#+begin_src agda2
  EuclidGCD′ : (m n : ℕ) → Acc _<′_ (m ⊔ n) → ℕ
  EuclidGCD′ zero m _ = m
  EuclidGCD′ n@(suc _) zero _ = n
  EuclidGCD′ m@(suc m₀) n@(suc n₀) (acc rs) =
    case <-cmp m n of
      λ { (tri< m<n _ _) →
          EuclidGCD′ m (n ∸ m)
                     (rs {suc m₀ ⊔ (n₀ ∸ m₀)}
                         (≤⇒≤′ (m<n⇒m<o⊔n m (⊔-pres-<m m<n (Sm∸Sn<Sm n₀ m₀)))))
        ; (tri≈ _ _ _)   → m
        ; (tri> _ _ n<m) →
          EuclidGCD′ (m ∸ n) n
                     (rs {m₀ ∸ n₀ ⊔ suc n₀}
                         (≤⇒≤′ (m<n⇒m<n⊔o n (⊔-pres-<m (Sm∸Sn<Sm m₀ n₀) n<m))))
        }
#+end_src
In the recursive cases, ~rs~ has the type
#+begin_example agda2
{y : ℕ} → suc y ≤′ suc (m₀ ⊔ n₀) → Acc (λ m₁ n₁ → suc m₁ ≤′ n₁) y
#+end_example
We've written the implicit argument in in each use
(although Agda doesn't need it to be given)
for clarity.

Now, we can define a “clean” version of the Euclidean algorithm function
by utilising our proof that ~_<′_~ is well-founded.
#+begin_src agda2
  EuclidGCD : (m n : ℕ) → ℕ
  EuclidGCD m n = EuclidGCD′ m n (<′-well-founded (m ⊔ n))
#+end_src

** Solution version 2 – Using the standard library's definitions
   :PROPERTIES:
   :CUSTOM_ID: Solution-version-2-–-Using-the-standard-library's-definitions
   :END:

The standard library defines its notions of well-foundedness
and accessibility in ~Induction.WellFounded~,
and proves that ~_<′_~ is well-founded
in ~Data.Nat.Induction~ —previously it was ~Induction.Nat~,
which does still exist, but is deprecated.
#+begin_src agda2
open import Data.Nat.Induction using (<′-wellFounded)
open import Induction.WellFounded using (Acc ; acc)
#+end_src

Aside from the fact that ~rs~ takes an explicit argument
where we used an implicit one, and a slightly different name
for the well-foundedness of ~_<′_~, we are able
to echo our definitions above using the standard library.
#+begin_src agda2
EuclidGCD′ : (m n : ℕ) → Acc _<′_ (m ⊔ n) → ℕ
EuclidGCD′ zero m _ = m
EuclidGCD′ n@(suc _) zero _ = n
EuclidGCD′ m@(suc m₀) n@(suc n₀) (acc rs) =
  case <-cmp m n of
    λ { (tri< m<n _ _) →
        EuclidGCD′ m (n ∸ m)
                   (rs (suc m₀ ⊔ (n₀ ∸ m₀))
                       (≤⇒≤′ (m<n⇒m<o⊔n m (⊔-pres-<m m<n (Sm∸Sn<Sm n₀ m₀)))))
      ; (tri≈ _ _ _)   → m
      ; (tri> _ _ n<m) →
        EuclidGCD′ (m ∸ n) n
                   (rs (m₀ ∸ n₀ ⊔ suc n₀)
                       (≤⇒≤′ (m<n⇒m<n⊔o n (⊔-pres-<m (Sm∸Sn<Sm m₀ n₀) n<m))))
      }

EuclidGCD : (m n : ℕ) → ℕ
EuclidGCD m n = EuclidGCD′ m n (<′-wellFounded (m ⊔ n))
#+end_src

As a next step, let's move on to a more complicated domain than
the natural numbers.

* Problem 2 Draft 1 – Bintree's with union

This turned out to be obviously terminating,
once I got the algorithm correct.
But the code is preserved here.
#+begin_src agda2
module BinTree₁ (Elem : Set) (# : Elem → ℕ) where

  data BinTree : Set where
    nilT : BinTree
    branch : BinTree → Elem → BinTree → BinTree

  [_] : Elem → BinTree
  [ e ] = branch nilT e nilT

  insert : Elem → BinTree → BinTree
  insert e nilT = [ e ]
  insert e (branch t₁ x t₂) = case <-cmp (# e) (# x) of λ
    { (tri< e<x ¬e≡x ¬e>x) → branch (insert e t₁) x t₂
    ; (tri≈ ¬e<x e≡x ¬e>x) → branch t₁ e t₂
    ; (tri> ¬e<x ¬e≡x e>x) → branch t₁ x (insert e t₂)
    }

  module Bad where

    union : BinTree → BinTree → BinTree
    union nilT t = t
    union (branch l₁ e₁ r₁) (branch l₂ e₂ r₂) =
      case <-cmp (# e₁) (# e₂) of λ
        { (tri< _ _ _) →
            union (insert e₂ (branch l₁ e₁ (union r₁ r₂)))
                  l₂
        ; (tri≈ _ _ _) → branch (union l₁ l₂) e₁ (union r₁ r₂)
        ; (tri> _ _ _) →
            union (insert e₂ (branch (union l₁ l₂) e₁ r₁))
                  r₂
        }
    union t@(branch _ _ _) nilT = t

  height : BinTree → ℕ
  height nilT = 0
  height (branch t₁ _ t₂) = suc (height t₁ ⊔ height t₂)

  open import Data.Nat.Properties using (n≤m⊔n ; m≤m⊔n)
  
  n<′suc[m⊔n] : {m n : ℕ} → n <′ suc (m ⊔ n)
  n<′suc[m⊔n] = ≤⇒≤′ (s≤s (n≤m⊔n _ _))

  m<′suc[m⊔n] : {m n : ℕ} → m <′ suc (m ⊔ n)
  m<′suc[m⊔n] = ≤⇒≤′ (s≤s (m≤m⊔n _ _))

  union′ : (t₁ t₂ : BinTree) → Acc _<′_ (height t₂) → BinTree
  union′ nilT t _ = t
  union′ (branch l₁ e₁ r₁) (branch l₂ e₂ r₂) (acc rs) =
    let hʳ₁ = height r₁
        hʳ₂ = height r₂
        hˡ₁ = height l₁
        hˡ₂ = height l₂
    in
    case <-cmp (# e₁) (# e₂) of λ
        { (tri< _ _ _) →
            union′ (insert e₂ (branch l₁ e₁ (union′ r₁ r₂ (rs _ n<′suc[m⊔n]))))
                   l₂
                   (rs _ m<′suc[m⊔n])
        ; (tri≈ _ _ _) → branch (union′ l₁ l₂ (rs _ m<′suc[m⊔n]))
                                e₁
                                (union′ r₁ r₂ (rs _ n<′suc[m⊔n]))
        ; (tri> _ _ _) →
            union′ (insert e₂ (branch (union′ l₁ l₂ (rs _ m<′suc[m⊔n])) e₁ r₁))
                   r₂
                   (rs _ n<′suc[m⊔n])
        } 
  union′ t@(branch _ _ _) nilT _ = t

  _∪_ : (t₁ t₂ : BinTree) → BinTree
  t₁ ∪ t₂ = union′ t₁ t₂ (<′-wellFounded (height t₂))
#+end_src

Test it out:
#+begin_src agda2
module Test where

  open BinTree₁ ℕ (λ x → x)

  tree₁ : BinTree
  tree₁ = branch (branch (branch nilT
                                 1
                                 nilT)
                         3
                         nilT)
                 5
                 (branch (branch nilT
                                 7
                                 nilT)
                         8
                         nilT)

  tree₂ : BinTree
  tree₂ = branch (branch nilT
                         2
                         nilT)
                 4 (branch (branch nilT
                                   5
                                   nilT)
                           6
                           (branch nilT
                                   9
                                   nilT))

  _ : tree₁ ∪ tree₂ ≡
      branch (branch (branch nilT
                             1
                             (branch nilT
                                     2
                                     nilT))
                     3
                     (branch nilT
                             4
                             nilT))
             5
             (branch (branch (branch nilT
                                     6
                                     nilT)
                             7
                             nilT)
                     8
                     (branch nilT
                             9
                             nilT))
  _ = refl

  _ : tree₂ ∪ tree₁ ≡
      branch (branch (branch nilT
                             1
                             nilT)
                     2
                     (branch nilT
                             3
                             nilT))
             4
             (branch (branch nilT
                             5
                             nilT)
                     6
                     (branch (branch (branch nilT
                                             7
                                             nilT)
                                     8
                                     nilT)
                             9
                             nilT))
  _ = refl
#+end_src

* Problem 2

#+begin_src agda2
module BinTree (Elem : Set) (# : Elem → ℕ) where

  data BinTree : Set where
    nilT : BinTree
    branch : BinTree → Elem → BinTree → BinTree

--  [_] : Elem → BinTree
--  [ e ] = branch nilT e nilT

--  insert : Elem → BinTree → BinTree
--  insert e nilT = [ e ]
--  insert e (branch t₁ x t₂) = case <-cmp (# e) (# x) of λ
--    { (tri< e<x ¬e≡x ¬e>x) → branch (insert e t₁) x t₂
--    ; (tri≈ ¬e<x e≡x ¬e>x) → branch t₁ e t₂
--    ; (tri> ¬e<x ¬e≡x e>x) → branch t₁ x (insert e t₂)
--    }

  height : BinTree → ℕ
  height nilT = zero
  height (branch t₁ _ t₂) = suc (height t₁ ⊔ height t₂)

  data Lean : Set where
    left : ℕ → Lean
    right : ℕ → Lean
    none : Lean

  -- Note that a lean of 0 means the heights are off by just one.
  lean : BinTree → Lean
  lean nilT = none
  lean (branch t₁ _ t₂) = case <-cmp (height t₁) (height t₂) of λ
    { (tri< _ _ _) → right (height t₂ ∸ height t₁)
    ; (tri≈ _ _ _) → none
    ; (tri> _ _ _) → left (height t₁ ∸ height t₂)
    }

  rootBalanced : BinTree → Set
  rootBalanced t = lean t ≡ none ⊎ {!lean t ≡ left 0 ⊎ lean t ≡ right 0!}

  balanced : BinTree → Set
  balanced nilT = ⊤
  balanced t@(branch t₁ _ t₂) =
    balanced t₁ × rootBalanced t × balanced t₂ 

  pivotLeft : BinTree → BinTree
  pivotLeft (branch l root (branch rl root′ rr)) =
    branch (branch l root rl) root′ rr
  {-# CATCHALL #-}
  pivotLeft t = t

  pivotRight : BinTree → BinTree
  pivotRight (branch (branch ll root′ lr) root r) =
    branch ll root′ (branch lr root r)
  {-# CATCHALL #-}
  pivotRight t = t

  -- The balance factor is zero if the left and right subtrees are the same height,
  -- or if they are off by at most one (lean of 0).
  rootBalanceFactor : BinTree → ℕ
  rootBalanceFactor nilT = zero
  rootBalanceFactor t@(branch t₁ _ t₂) = case lean t of λ
    { (left  factor) → factor
    ; (right factor) → factor
    ; none           → zero
    }

  open import Data.Nat using (_⊓_)

  -- For the balance algorithm, we need to check if there is
  -- any unbalanced node in a subtree. Checking for the maximum imbalance
  -- suffices.
  maxImbalance : BinTree → ℕ
  maxImbalance nilT = zero
  maxImbalance t@(branch t₁ _ t₂) =
    maxImbalance t₁ ⊓ rootBalanceFactor t ⊓ maxImbalance t₂

  module Bad where
  
    {-# TERMINATING #-}
    balance : BinTree → BinTree
    balance nilT = nilT
    balance t@(branch t₁ e t₂) = case maxImbalance t₁ of λ
      { (suc _) → balance (branch (balance t₁) e t₂)
      ; zero    → case maxImbalance t₂ of λ
                  { (suc _) → balance (branch t₁ e (balance t₂))
                  ; zero    → case lean t of λ
                              { (left (suc _))  → balance (pivotRight t)
                              ; (right (suc _)) → balance (pivotLeft t)
                              ; none            → t
                              ; (left zero)     → t
                              ; (right zero)    → t
                              }
                  }
      }
#+end_src

#+begin_src agda2
  -- There's no guarantee with our algorithm that the maximum imbalance
  -- decreases at each step. But the /sum/ of the imbalances
  -- should decrease, because we always make one subtree “better”.

  totalImbalance : BinTree → ℕ
  totalImbalance nilT = 0
  totalImbalance t@(branch t₁ _ t₂) =
    totalImbalance t₁ + rootBalanceFactor t + totalImbalance t₂

  _≺_ : BinTree → BinTree → Set
  t₁ ≺ t₂ = (height t₁ <′ height t₂ × totalImbalance t₁ ≤ totalImbalance t₂)
          ⊎ (height t₁ ≤ height t₂  × totalImbalance t₁ <′ totalImbalance t₂)

  balance′ : (t : BinTree) → Acc _≺_ t  → BinTree
  balance′ nilT _ = nilT
  balance′ t@(branch t₁ e t₂) (acc rs) = case maxImbalance t₁ of λ
    { (suc _) → balance′ (branch (balance′ t₁ {!!}) e t₂) (rs _ {!!})
    ; zero    → {!!}
    }

  open import Induction.WellFounded using (WellFounded)

  ≺-acc : {x y : BinTree} → y ≺ x → Acc _≺_ y
  ≺-acc {branch _ _ _} {y} (inj₁ (fst , snd)) = acc {!!}
  ≺-acc {branch _ _ _} {y} (inj₂ (fst , snd)) = {!!}

  ≺-WellFounded : WellFounded _≺_
  -- No trees less than the empty tree, in either sense.
  ≺-WellFounded nilT = acc (λ { _ (inj₁ ())
                              ; _ (inj₂ ()) })
  -- …
  ≺-WellFounded (branch _ _ _) = acc (λ { y (inj₁ (fst , snd)) → acc {!!}
                                        ; y (inj₂ (fst , snd)) → acc (λ y₁ x₃ → {!≺-WellFounded ?!}) } )
#+end_src

#+begin_src agda2
module BadBalanceTest where

  open BinTree ℕ (λ x → x)
  open Bad renaming (balance to badBalance)

  t₂′ : BinTree
  t₂′ = branch nilT 3 nilT

  t₂ : BinTree
  t₂ = branch nilT 2 t₂′

  tree : BinTree
  tree = branch nilT 1 t₂

  {- Walk through the algorithm manually
  _ : balanceFactor t₂ ≡ 0
  _ = refl

  _ : balanceFactor nilT ≡ 0
  _ = refl

  _ : lean tree ≡ right 2
  _ = refl

  tree′ : BinTree
  tree′ = pivotLeft tree

  _ : tree′ ≡ {!nilT!}
  _ = refl
  -}

  _ : badBalance tree ≡ branch (branch nilT 1 nilT) 2 (branch nilT 3 nilT)
  _ = refl
#+end_src
